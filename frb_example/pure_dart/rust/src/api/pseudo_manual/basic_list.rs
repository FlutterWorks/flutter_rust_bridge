// NOTE: This file is mimicking how a human developer writes tests,
// and is auto-generated by frb_internal
// Please do not modify manually, but modify the origin and re-run frb_internal generator

pub use super::basic::*;
pub fn example_basic_list_type_i8_twin_normal(arg: Vec<i8>) -> Vec<i8> {
    arg
}

pub fn example_basic_list_type_i16_twin_normal(arg: Vec<i16>) -> Vec<i16> {
    arg
}

pub fn example_basic_list_type_i32_twin_normal(arg: Vec<i32>) -> Vec<i32> {
    arg
}

pub fn example_basic_list_type_i64_twin_normal(arg: Vec<i64>) -> Vec<i64> {
    arg
}

pub fn example_basic_list_type_u8_twin_normal(arg: Vec<u8>) -> Vec<u8> {
    arg
}

pub fn example_basic_list_type_u16_twin_normal(arg: Vec<u16>) -> Vec<u16> {
    arg
}

pub fn example_basic_list_type_u32_twin_normal(arg: Vec<u32>) -> Vec<u32> {
    arg
}

pub fn example_basic_list_type_u64_twin_normal(arg: Vec<u64>) -> Vec<u64> {
    arg
}

pub fn example_basic_list_type_f32_twin_normal(arg: Vec<f32>) -> Vec<f32> {
    arg
}

pub fn example_basic_list_type_f64_twin_normal(arg: Vec<f64>) -> Vec<f64> {
    arg
}

pub fn example_basic_list_type_bool_twin_normal(arg: Vec<bool>) -> Vec<bool> {
    arg
}

pub fn example_basic_list_type_string_twin_normal(arg: Vec<String>) -> Vec<String> {
    arg
}

pub fn example_basic_list_type_bytes_twin_normal(arg: Vec<Vec<u8>>) -> Vec<Vec<u8>> {
    arg
}

pub fn example_basic_list_type_basic_primitive_enum_twin_normal_twin_normal(
    arg: Vec<BasicPrimitiveEnumTwinNormal>,
) -> Vec<BasicPrimitiveEnumTwinNormal> {
    arg
}

pub fn example_basic_list_type_basic_general_enum_twin_normal_twin_normal(
    arg: Vec<BasicGeneralEnumTwinNormal>,
) -> Vec<BasicGeneralEnumTwinNormal> {
    arg
}

pub fn example_basic_list_type_basic_struct_twin_normal_twin_normal(
    arg: Vec<BasicStructTwinNormal>,
) -> Vec<BasicStructTwinNormal> {
    arg
}
